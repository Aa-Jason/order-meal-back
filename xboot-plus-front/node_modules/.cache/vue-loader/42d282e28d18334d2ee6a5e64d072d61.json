{"remainingRequest":"D:\\work\\workspace\\order\\xboot-plus-front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\work\\workspace\\order\\xboot-plus-front\\src\\views\\main-components\\shrinkable-menu\\components\\sidebarMenu.vue?vue&type=style&index=0&lang=less&","dependencies":[{"path":"D:\\work\\workspace\\order\\xboot-plus-front\\src\\views\\main-components\\shrinkable-menu\\components\\sidebarMenu.vue","mtime":1651629755171},{"path":"D:\\work\\workspace\\order\\xboot-plus-front\\node_modules\\css-loader\\dist\\cjs.js","mtime":1651770028580},{"path":"D:\\work\\workspace\\order\\xboot-plus-front\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1651770027142},{"path":"D:\\work\\workspace\\order\\xboot-plus-front\\node_modules\\postcss-loader\\src\\index.js","mtime":1651770027415},{"path":"D:\\work\\workspace\\order\\xboot-plus-front\\node_modules\\less-loader\\dist\\cjs.js","mtime":1651770042155},{"path":"D:\\work\\workspace\\order\\xboot-plus-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1651770036753},{"path":"D:\\work\\workspace\\order\\xboot-plus-front\\node_modules\\vue-loader\\lib\\index.js","mtime":1651770027133}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQpAaW1wb3J0ICIuLi9zdHlsZXMvbWVudS5sZXNzIjsNCg=="},{"version":3,"sources":["sidebarMenu.vue"],"names":[],"mappings":";AACA","file":"sidebarMenu.vue","sourceRoot":"src/views/main-components/shrinkable-menu/components","sourcesContent":["<style lang=\"less\">\r\n@import \"../styles/menu.less\";\r\n</style>\r\n<template>\r\n  <div>\r\n    <Menu\r\n      ref=\"sideMenu\"\r\n      :accordion=\"accordion\"\r\n      :active-name=\"$route.name\"\r\n      :open-names=\"openNames\"\r\n      :theme=\"theme\"\r\n      width=\"auto\"\r\n      @on-select=\"changeMenu\"\r\n    >\r\n      <template v-for=\"item in menuList\">\r\n        <!-- 如果是一级菜单并设置了不一直显示 -->\r\n        <template v-if=\"item.level == '1' && !item.showAlways\">\r\n          <MenuItem\r\n            v-if=\"item.children.length <= 1\"\r\n            :name=\"item.children[0].name\"\r\n            :key=\"'menuitem' + item.name\"\r\n          >\r\n            <XIcon\r\n              :type=\"item.children[0].icon || item.icon\"\r\n              :size=\"iconSize\"\r\n              :key=\"'menuicon' + item.name\"\r\n            ></XIcon>\r\n            <span class=\"content-text\" :key=\"'title' + item.name\">{{\r\n              itemTitle(item.children[0])\r\n            }}</span>\r\n          </MenuItem>\r\n          <Submenu\r\n            v-if=\"item.children.length > 1\"\r\n            :name=\"item.name\"\r\n            :key=\"item.name\"\r\n          >\r\n            <template slot=\"title\">\r\n              <XIcon :type=\"item.icon\" :size=\"iconSize\"></XIcon>\r\n              <span class=\"content-text\">{{ itemTitle(item) }}</span>\r\n            </template>\r\n            <template v-for=\"child in item.children\">\r\n              <MenuItem :name=\"child.name\" :key=\"'menuitem' + child.name\">\r\n                <XIcon\r\n                  :type=\"child.icon\"\r\n                  :size=\"iconSize\"\r\n                  :key=\"'icon' + child.name\"\r\n                ></XIcon>\r\n                <span class=\"content-text\" :key=\"'title' + child.name\">{{\r\n                  itemTitle(child)\r\n                }}</span>\r\n              </MenuItem>\r\n            </template>\r\n          </Submenu>\r\n        </template>\r\n        <template v-else>\r\n          <Submenu :name=\"item.name\" :key=\"item.name\">\r\n            <template slot=\"title\">\r\n              <XIcon :type=\"item.icon\" :size=\"iconSize\"></XIcon>\r\n              <span class=\"content-text\">{{ itemTitle(item) }}</span>\r\n            </template>\r\n            <template v-for=\"child in item.children\">\r\n              <MenuItem :name=\"child.name\" :key=\"'menuitem' + child.name\">\r\n                <XIcon\r\n                  :type=\"child.icon\"\r\n                  :size=\"iconSize\"\r\n                  :key=\"'icon' + child.name\"\r\n                ></XIcon>\r\n                <span class=\"content-text\" :key=\"'title' + child.name\">{{\r\n                  itemTitle(child)\r\n                }}</span>\r\n              </MenuItem>\r\n            </template>\r\n          </Submenu>\r\n        </template>\r\n      </template>\r\n    </Menu>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"sidebarMenu\",\r\n  data() {\r\n    return {};\r\n  },\r\n  computed: {\r\n    accordion() {\r\n      return this.$store.state.theme.theme.accordion;\r\n    },\r\n  },\r\n  props: {\r\n    menuList: Array,\r\n    iconSize: Number,\r\n    theme: {\r\n      type: String,\r\n      default: \"darkblue\",\r\n    },\r\n    openNames: {\r\n      type: Array,\r\n    },\r\n  },\r\n  methods: {\r\n    changeMenu(active) {\r\n      this.$emit(\"on-change\", active);\r\n    },\r\n    handleSelect(name) {\r\n      this.$emit(\"on-select\", name);\r\n    },\r\n    itemTitle(item) {\r\n      if (item.localize && item.i18n) {\r\n        return this.$t(item.i18n);\r\n      } else {\r\n        return item.title;\r\n      }\r\n    },\r\n    getOpenedNamesByActiveName(name) {\r\n      return this.$route.matched\r\n        .map((item) => item.name)\r\n        .filter((item) => item !== name);\r\n    },\r\n  },\r\n  updated() {\r\n    this.$nextTick(() => {\r\n      if (this.$refs.sideMenu) {\r\n        this.$refs.sideMenu.updateOpened();\r\n      }\r\n    });\r\n  },\r\n};\r\n</script>\r\n"]}]}