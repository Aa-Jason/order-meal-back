{"remainingRequest":"D:\\work\\workspace\\order\\xboot-plus-front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\work\\workspace\\order\\xboot-plus-front\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\work\\workspace\\order\\xboot-plus-front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\work\\workspace\\order\\xboot-plus-front\\src\\views\\xboot-vue-generator\\tableGenerator.vue?vue&type=template&id=0c2c8d65&","dependencies":[{"path":"D:\\work\\workspace\\order\\xboot-plus-front\\src\\views\\xboot-vue-generator\\tableGenerator.vue","mtime":1651629755320},{"path":"D:\\work\\workspace\\order\\xboot-plus-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1651770036753},{"path":"D:\\work\\workspace\\order\\xboot-plus-front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1651770027143},{"path":"D:\\work\\workspace\\order\\xboot-plus-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1651770036753},{"path":"D:\\work\\workspace\\order\\xboot-plus-front\\node_modules\\vue-loader\\lib\\index.js","mtime":1651770027133}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}