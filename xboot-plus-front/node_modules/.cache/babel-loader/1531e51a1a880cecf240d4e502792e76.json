{"remainingRequest":"D:\\work\\workspace\\order\\xboot-plus-front\\node_modules\\babel-loader\\lib\\index.js!D:\\work\\workspace\\order\\xboot-plus-front\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\work\\workspace\\order\\xboot-plus-front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\work\\workspace\\order\\xboot-plus-front\\src\\views\\sys\\redis\\redisMonitor.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\work\\workspace\\order\\xboot-plus-front\\src\\views\\sys\\redis\\redisMonitor.vue","mtime":1651629755228},{"path":"D:\\work\\workspace\\order\\xboot-plus-front\\babel.config.js","mtime":1651629754991},{"path":"D:\\work\\workspace\\order\\xboot-plus-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1651770036753},{"path":"D:\\work\\workspace\\order\\xboot-plus-front\\node_modules\\babel-loader\\lib\\index.js","mtime":1651770037115},{"path":"D:\\work\\workspace\\order\\xboot-plus-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1651770036753},{"path":"D:\\work\\workspace\\order\\xboot-plus-front\\node_modules\\vue-loader\\lib\\index.js","mtime":1651770027133}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IHsgZ2V0UmVkaXNLZXlTaXplLCBnZXRSZWRpc01lbW9yeSwgZ2V0UmVkaXNJbmZvIH0gZnJvbSAiQC9hcGkvaW5kZXgiOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogInJlZGlzTW9uaXRvciIsCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIG1lbW9yeTogewogICAgICAgIHNlcmllczogW3sKICAgICAgICAgIG5hbWU6ICLlhoXlrZgoS0IpIiwKICAgICAgICAgIGRhdGE6IFswXQogICAgICAgIH1dLAogICAgICAgIGNoYXJ0T3B0aW9uczogewogICAgICAgICAgY2hhcnQ6IHsKICAgICAgICAgICAgYW5pbWF0aW9uczogewogICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsCiAgICAgICAgICAgICAgZWFzaW5nOiAibGluZWFyIiwKICAgICAgICAgICAgICBkeW5hbWljQW5pbWF0aW9uOiB7CiAgICAgICAgICAgICAgICBzcGVlZDogNTAwMAogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgdG9vbGJhcjogewogICAgICAgICAgICAgIHNob3c6IGZhbHNlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHpvb206IHsKICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZQogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgZGF0YUxhYmVsczogewogICAgICAgICAgICBlbmFibGVkOiBmYWxzZQogICAgICAgICAgfSwKICAgICAgICAgIHN0cm9rZTogewogICAgICAgICAgICBjdXJ2ZTogInNtb290aCIKICAgICAgICAgIH0sCiAgICAgICAgICB0aXRsZTogewogICAgICAgICAgICB0ZXh0OiAiUmVkaXPlhoXlrZjlrp7ml7bljaDnlKjmg4XlhrXvvIhLQu+8iSIsCiAgICAgICAgICAgIGFsaWduOiAibGVmdCIKICAgICAgICAgIH0sCiAgICAgICAgICBtYXJrZXJzOiB7CiAgICAgICAgICAgIHNpemU6IDAKICAgICAgICAgIH0sCiAgICAgICAgICB4YXhpczoge30sCiAgICAgICAgICB5YXhpczoge30sCiAgICAgICAgICBsZWdlbmQ6IHsKICAgICAgICAgICAgc2hvdzogZmFsc2UKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIGRhdGE6IFtdLAogICAgICAgIHhkYXRhOiBbXQogICAgICB9LAogICAgICBrZXk6IHsKICAgICAgICBzZXJpZXM6IFt7CiAgICAgICAgICBuYW1lOiAia2V55pWw6YePIiwKICAgICAgICAgIGRhdGE6IFswXQogICAgICAgIH1dLAogICAgICAgIGNoYXJ0T3B0aW9uczogewogICAgICAgICAgY2hhcnQ6IHsKICAgICAgICAgICAgYW5pbWF0aW9uczogewogICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsCiAgICAgICAgICAgICAgZWFzaW5nOiAibGluZWFyIiwKICAgICAgICAgICAgICBkeW5hbWljQW5pbWF0aW9uOiB7CiAgICAgICAgICAgICAgICBzcGVlZDogNTAwMAogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgdG9vbGJhcjogewogICAgICAgICAgICAgIHNob3c6IGZhbHNlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHpvb206IHsKICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZQogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgZGF0YUxhYmVsczogewogICAgICAgICAgICBlbmFibGVkOiBmYWxzZQogICAgICAgICAgfSwKICAgICAgICAgIGNvbG9yczogWyIjZjU1NjRlIl0sCiAgICAgICAgICBzdHJva2U6IHsKICAgICAgICAgICAgY3VydmU6ICJzbW9vdGgiCiAgICAgICAgICB9LAogICAgICAgICAgdGl0bGU6IHsKICAgICAgICAgICAgdGV4dDogIlJlZGlzIGtleeWunuaXtuaVsOmHj++8iOS4qu+8iSIsCiAgICAgICAgICAgIGFsaWduOiAibGVmdCIKICAgICAgICAgIH0sCiAgICAgICAgICBtYXJrZXJzOiB7CiAgICAgICAgICAgIHNpemU6IDAKICAgICAgICAgIH0sCiAgICAgICAgICB4YXhpczoge30sCiAgICAgICAgICB5YXhpczoge30sCiAgICAgICAgICBsZWdlbmQ6IHsKICAgICAgICAgICAgc2hvdzogZmFsc2UKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIGRhdGE6IFtdLAogICAgICAgIHhkYXRhOiBbXQogICAgICB9LAogICAgICBjb2x1bW5zOiBbewogICAgICAgIGtleTogImtleSIsCiAgICAgICAgbWluV2lkdGg6IDIwMAogICAgICB9LCB7CiAgICAgICAga2V5OiAiZGVzY3JpcHRpb24iLAogICAgICAgIG1pbldpZHRoOiA1MDAKICAgICAgfSwgewogICAgICAgIGtleTogInZhbHVlIiwKICAgICAgICB3aWR0aDogNDAwCiAgICAgIH1dLAogICAgICByZWRpc0luZm86IFtdLAogICAgICB0aW1lcjogbnVsbCwKICAgICAgbWluTWVtb3J5OiAxZTEwLAogICAgICBtYXhNZW1vcnk6IC0xZTEwLAogICAgICBtaW5TaXplOiAxZTEwLAogICAgICBtYXhTaXplOiAtMWUxMAogICAgfTsKICB9LAogIG1ldGhvZHM6IHsKICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7CiAgICAgIHRoaXMuZ2V0RGF0YSgpOwogICAgICB0aGlzLmdldEluZm8oKTsKICAgIH0sCiAgICAvLyDnu5/orqEKICAgIGdldERhdGE6IGZ1bmN0aW9uIGdldERhdGEoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB0aGlzLmdldFJlcXVlc3REYXRhKCk7CiAgICAgIHRoaXMudGltZXIgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7CiAgICAgICAgX3RoaXMuZ2V0UmVxdWVzdERhdGEoKTsKICAgICAgfSwgNTAwMCk7CiAgICB9LAogICAgZ2V0UmVxdWVzdERhdGE6IGZ1bmN0aW9uIGdldFJlcXVlc3REYXRhKCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIC8vIOWGheWtmAogICAgICBnZXRSZWRpc01lbW9yeSgpLnRoZW4oZnVuY3Rpb24gKHJlcykgewogICAgICAgIHZhciBjdXJyZW50TWVtb3J5ID0gTnVtYmVyKHJlcy5yZXN1bHQubWVtb3J5KSAvIDEwMjQ7IC8vIOabtOaWsOacgOWkp+acgOWwj+WAvAoKICAgICAgICBpZiAoY3VycmVudE1lbW9yeSA8IF90aGlzMi5taW5NZW1vcnkpIHsKICAgICAgICAgIF90aGlzMi5taW5NZW1vcnkgPSBjdXJyZW50TWVtb3J5OwogICAgICAgIH0KCiAgICAgICAgaWYgKGN1cnJlbnRNZW1vcnkgPiBfdGhpczIubWF4TWVtb3J5KSB7CiAgICAgICAgICBfdGhpczIubWF4TWVtb3J5ID0gY3VycmVudE1lbW9yeTsKICAgICAgICB9CgogICAgICAgIF90aGlzMi5tZW1vcnkuZGF0YS5wdXNoKE51bWJlcihjdXJyZW50TWVtb3J5LnRvRml4ZWQoMikpKTsKCiAgICAgICAgX3RoaXMyLm1lbW9yeS54ZGF0YS5wdXNoKHJlcy5yZXN1bHQudGltZSk7IC8vIDXkuKrngrkKCgogICAgICAgIGlmIChfdGhpczIubWVtb3J5LmRhdGEubGVuZ3RoID49IDYpIHsKICAgICAgICAgIF90aGlzMi5tZW1vcnkuZGF0YS5zaGlmdCgpOwoKICAgICAgICAgIF90aGlzMi5tZW1vcnkueGRhdGEuc2hpZnQoKTsKICAgICAgICB9IC8vIOabtOaWsOeCueS/oeaBrwoKCiAgICAgICAgX3RoaXMyLiRyZWZzLm1lbW9yeUluZm8udXBkYXRlU2VyaWVzKFt7CiAgICAgICAgICBuYW1lOiAi5YaF5a2YKEtCKSIsCiAgICAgICAgICBkYXRhOiBfdGhpczIubWVtb3J5LmRhdGEKICAgICAgICB9XSk7IC8vIOabtOaWsOacgOWkp+acgOWwj+WAvAoKCiAgICAgICAgX3RoaXMyLiRyZWZzLm1lbW9yeUluZm8udXBkYXRlT3B0aW9ucyh7CiAgICAgICAgICB4YXhpczogewogICAgICAgICAgICBjYXRlZ29yaWVzOiBfdGhpczIubWVtb3J5LnhkYXRhCiAgICAgICAgICB9LAogICAgICAgICAgeWF4aXM6IHsKICAgICAgICAgICAgbWluOiBfdGhpczIubWluTWVtb3J5IC0gMiwKICAgICAgICAgICAgbWF4OiBfdGhpczIubWF4TWVtb3J5ICsgMgogICAgICAgICAgfQogICAgICAgIH0sIHRydWUsIHRydWUpOwogICAgICB9KTsgLy8g6ZSu5YC8CgogICAgICBnZXRSZWRpc0tleVNpemUoKS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICB2YXIgY3VycmVudFNpemUgPSByZXMucmVzdWx0LmtleVNpemU7IC8vIOabtOaWsOacgOWkp+acgOWwj+WAvAoKICAgICAgICBpZiAoY3VycmVudFNpemUgPCBfdGhpczIubWluU2l6ZSkgewogICAgICAgICAgX3RoaXMyLm1pblNpemUgPSBjdXJyZW50U2l6ZTsKICAgICAgICB9CgogICAgICAgIGlmIChjdXJyZW50U2l6ZSA+IF90aGlzMi5tYXhTaXplKSB7CiAgICAgICAgICBfdGhpczIubWF4U2l6ZSA9IGN1cnJlbnRTaXplOwogICAgICAgIH0KCiAgICAgICAgX3RoaXMyLmtleS5kYXRhLnB1c2goY3VycmVudFNpemUpOwoKICAgICAgICBfdGhpczIua2V5LnhkYXRhLnB1c2gocmVzLnJlc3VsdC50aW1lKTsgLy8gNeS4queCuQoKCiAgICAgICAgaWYgKF90aGlzMi5rZXkuZGF0YS5sZW5ndGggPj0gNikgewogICAgICAgICAgX3RoaXMyLmtleS5kYXRhLnNoaWZ0KCk7CgogICAgICAgICAgX3RoaXMyLmtleS54ZGF0YS5zaGlmdCgpOwogICAgICAgIH0gLy8g5pu05paw54K55L+h5oGvCgoKICAgICAgICBfdGhpczIuJHJlZnMua2V5U2l6ZS51cGRhdGVTZXJpZXMoW3sKICAgICAgICAgIG5hbWU6ICJrZXnmlbDph48iLAogICAgICAgICAgZGF0YTogX3RoaXMyLmtleS5kYXRhCiAgICAgICAgfV0pOyAvLyDmm7TmlrDmnIDlpKfmnIDlsI/lgLwKCgogICAgICAgIF90aGlzMi4kcmVmcy5rZXlTaXplLnVwZGF0ZU9wdGlvbnMoewogICAgICAgICAgeGF4aXM6IHsKICAgICAgICAgICAgY2F0ZWdvcmllczogX3RoaXMyLmtleS54ZGF0YQogICAgICAgICAgfSwKICAgICAgICAgIC8vIOmBv+WFjeacgOWkp+acgOWwj+WAvOS4gOiHtAogICAgICAgICAgeWF4aXM6IHsKICAgICAgICAgICAgbWluOiBfdGhpczIubWluU2l6ZSAtIDIsCiAgICAgICAgICAgIG1heDogX3RoaXMyLm1heFNpemUgKyAyCiAgICAgICAgICB9CiAgICAgICAgfSwgdHJ1ZSwgdHJ1ZSk7CiAgICAgIH0pOwogICAgfSwKICAgIGdldEluZm86IGZ1bmN0aW9uIGdldEluZm8oKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgZ2V0UmVkaXNJbmZvKCkudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgdmFyIGRhdGEgPSBbXTsKICAgICAgICByZXMucmVzdWx0LmZvckVhY2goZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIGlmIChlLmRlc2NyaXB0aW9uKSB7CiAgICAgICAgICAgIGRhdGEucHVzaChlKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICBfdGhpczMucmVkaXNJbmZvID0gZGF0YTsKICAgICAgfSk7CiAgICB9CiAgfSwKICBiZWZvcmVEZXN0cm95OiBmdW5jdGlvbiBiZWZvcmVEZXN0cm95KCkgewogICAgaWYgKHRoaXMudGltZXIpIHsKICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLnRpbWVyKTsKICAgIH0KICB9LAogIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICB0aGlzLmluaXQoKTsKICB9Cn07"},{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;AACA;EACAA,oBADA;EAEAC,IAFA,kBAEA;IACA;MACAC;QACAC,SACA;UACAH,cADA;UAEAC;QAFA,CADA,CADA;QAOAG;UACAC;YACAC;cACAC,aADA;cAEAC,gBAFA;cAGAC;gBACAC;cADA;YAHA,CADA;YAQAC;cACAC;YADA,CARA;YAWAC;cACAN;YADA;UAXA,CADA;UAgBAO;YACAP;UADA,CAhBA;UAmBAQ;YACAC;UADA,CAnBA;UAsBAC;YACAC,yBADA;YAEAC;UAFA,CAtBA;UA0BAC;YACAC;UADA,CA1BA;UA6BAC,SA7BA;UA8BAC,SA9BA;UA+BAC;YACAZ;UADA;QA/BA,CAPA;QA0CAX,QA1CA;QA2CAwB;MA3CA,CADA;MA8CAC;QACAvB,SACA;UACAH,aADA;UAEAC;QAFA,CADA,CADA;QAOAG;UACAC;YACAC;cACAC,aADA;cAEAC,gBAFA;cAGAC;gBACAC;cADA;YAHA,CADA;YAQAC;cACAC;YADA,CARA;YAWAC;cACAN;YADA;UAXA,CADA;UAgBAO;YACAP;UADA,CAhBA;UAmBAoB,mBAnBA;UAoBAZ;YACAC;UADA,CApBA;UAuBAC;YACAC,wBADA;YAEAC;UAFA,CAvBA;UA2BAC;YACAC;UADA,CA3BA;UA8BAC,SA9BA;UA+BAC,SA/BA;UAgCAC;YACAZ;UADA;QAhCA,CAPA;QA2CAX,QA3CA;QA4CAwB;MA5CA,CA9CA;MA4FAG,UACA;QACAF,UADA;QAEAG;MAFA,CADA,EAKA;QACAH,kBADA;QAEAG;MAFA,CALA,EASA;QACAH,YADA;QAEAI;MAFA,CATA,CA5FA;MA0GAC,aA1GA;MA2GAC,WA3GA;MA4GAC,eA5GA;MA6GAC,gBA7GA;MA8GAC,aA9GA;MA+GAC;IA/GA;EAiHA,CApHA;EAqHAC;IACAC,IADA,kBACA;MACA;MACA;IACA,CAJA;IAKA;IACAC,OANA,qBAMA;MAAA;;MACA;MACA;QACA;MACA,CAFA,EAEA,IAFA;IAGA,CAXA;IAYAC,cAZA,4BAYA;MAAA;;MACA;MACAC;QACA,qDADA,CAEA;;QACA;UACA;QACA;;QACA;UACA;QACA;;QAEA;;QACA,0CAXA,CAYA;;;QACA;UACA;;UACA;QACA,CAhBA,CAiBA;;;QACA,sCACA;UACAzC,cADA;UAEAC;QAFA,CADA,GAlBA,CAyBA;;;QACA,sCACA;UACAqB;YACAoB;UADA,CADA;UAIAnB;YACAoB,yBADA;YAEAC;UAFA;QAJA,CADA,EAUA,IAVA,EAWA,IAXA;MAaA,CAvCA,EAFA,CA0CA;;MACAC;QACA,qCADA,CAEA;;QACA;UACA;QACA;;QACA;UACA;QACA;;QAEA;;QACA,uCAXA,CAYA;;;QACA;UACA;;UACA;QACA,CAhBA,CAiBA;;;QACA,mCACA;UACA7C,aADA;UAEAC;QAFA,CADA,GAlBA,CAwBA;;;QACA,mCACA;UACAqB;YACAoB;UADA,CADA;UAIA;UACAnB;YACAoB,uBADA;YAEAC;UAFA;QALA,CADA,EAWA,IAXA,EAYA,IAZA;MAcA,CAvCA;IAwCA,CA/FA;IAgGAE,OAhGA,qBAgGA;MAAA;;MACAC;QACA;QACAC;UACA;YACA/C;UACA;QACA,CAJA;QAKA;MACA,CARA;IASA;EA1GA,CArHA;EAiOAgD,aAjOA,2BAiOA;IACA;MACAC;IACA;EACA,CArOA;EAsOAC,OAtOA,qBAsOA;IACA;EACA;AAxOA","names":["name","data","memory","series","chartOptions","chart","animations","enabled","easing","dynamicAnimation","speed","toolbar","show","zoom","dataLabels","stroke","curve","title","text","align","markers","size","xaxis","yaxis","legend","xdata","key","colors","columns","minWidth","width","redisInfo","timer","minMemory","maxMemory","minSize","maxSize","methods","init","getData","getRequestData","getRedisMemory","categories","min","max","getRedisKeySize","getInfo","getRedisInfo","res","beforeDestroy","clearInterval","mounted"],"sourceRoot":"src/views/sys/redis","sources":["redisMonitor.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <Row>\r\n      <Col span=\"12\">\r\n        <apexchart\r\n          ref=\"memoryInfo\"\r\n          type=\"area\"\r\n          height=\"350\"\r\n          :options=\"memory.chartOptions\"\r\n          :series=\"memory.series\"\r\n        />\r\n      </Col>\r\n      <Col span=\"12\">\r\n        <apexchart\r\n          ref=\"keySize\"\r\n          type=\"area\"\r\n          height=\"350\"\r\n          :options=\"key.chartOptions\"\r\n          :series=\"key.series\"\r\n        />\r\n      </Col>\r\n    </Row>\r\n    <Divider orientation=\"left\">Redis详细信息</Divider>\r\n    <Table\r\n      :columns=\"columns\"\r\n      :data=\"redisInfo\"\r\n      :show-header=\"false\"\r\n      size=\"small\"\r\n    ></Table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { getRedisKeySize, getRedisMemory, getRedisInfo } from \"@/api/index\";\r\nexport default {\r\n  name: \"redisMonitor\",\r\n  data() {\r\n    return {\r\n      memory: {\r\n        series: [\r\n          {\r\n            name: \"内存(KB)\",\r\n            data: [0],\r\n          },\r\n        ],\r\n        chartOptions: {\r\n          chart: {\r\n            animations: {\r\n              enabled: true,\r\n              easing: \"linear\",\r\n              dynamicAnimation: {\r\n                speed: 5000,\r\n              },\r\n            },\r\n            toolbar: {\r\n              show: false,\r\n            },\r\n            zoom: {\r\n              enabled: false,\r\n            },\r\n          },\r\n          dataLabels: {\r\n            enabled: false,\r\n          },\r\n          stroke: {\r\n            curve: \"smooth\",\r\n          },\r\n          title: {\r\n            text: \"Redis内存实时占用情况（KB）\",\r\n            align: \"left\",\r\n          },\r\n          markers: {\r\n            size: 0,\r\n          },\r\n          xaxis: {},\r\n          yaxis: {},\r\n          legend: {\r\n            show: false,\r\n          },\r\n        },\r\n        data: [],\r\n        xdata: [],\r\n      },\r\n      key: {\r\n        series: [\r\n          {\r\n            name: \"key数量\",\r\n            data: [0],\r\n          },\r\n        ],\r\n        chartOptions: {\r\n          chart: {\r\n            animations: {\r\n              enabled: true,\r\n              easing: \"linear\",\r\n              dynamicAnimation: {\r\n                speed: 5000,\r\n              },\r\n            },\r\n            toolbar: {\r\n              show: false,\r\n            },\r\n            zoom: {\r\n              enabled: false,\r\n            },\r\n          },\r\n          dataLabels: {\r\n            enabled: false,\r\n          },\r\n          colors: [\"#f5564e\"],\r\n          stroke: {\r\n            curve: \"smooth\",\r\n          },\r\n          title: {\r\n            text: \"Redis key实时数量（个）\",\r\n            align: \"left\",\r\n          },\r\n          markers: {\r\n            size: 0,\r\n          },\r\n          xaxis: {},\r\n          yaxis: {},\r\n          legend: {\r\n            show: false,\r\n          },\r\n        },\r\n        data: [],\r\n        xdata: [],\r\n      },\r\n      columns: [\r\n        {\r\n          key: \"key\",\r\n          minWidth: 200,\r\n        },\r\n        {\r\n          key: \"description\",\r\n          minWidth: 500,\r\n        },\r\n        {\r\n          key: \"value\",\r\n          width: 400,\r\n        },\r\n      ],\r\n      redisInfo: [],\r\n      timer: null,\r\n      minMemory: 1e10,\r\n      maxMemory: -1e10,\r\n      minSize: 1e10,\r\n      maxSize: -1e10,\r\n    };\r\n  },\r\n  methods: {\r\n    init() {\r\n      this.getData();\r\n      this.getInfo();\r\n    },\r\n    // 统计\r\n    getData() {\r\n      this.getRequestData();\r\n      this.timer = setInterval(() => {\r\n        this.getRequestData();\r\n      }, 5000);\r\n    },\r\n    getRequestData() {\r\n      // 内存\r\n      getRedisMemory().then((res) => {\r\n        let currentMemory = Number(res.result.memory) / 1024;\r\n        // 更新最大最小值\r\n        if (currentMemory < this.minMemory) {\r\n          this.minMemory = currentMemory;\r\n        }\r\n        if (currentMemory > this.maxMemory) {\r\n          this.maxMemory = currentMemory;\r\n        }\r\n\r\n        this.memory.data.push(Number(currentMemory.toFixed(2)));\r\n        this.memory.xdata.push(res.result.time);\r\n        // 5个点\r\n        if (this.memory.data.length >= 6) {\r\n          this.memory.data.shift();\r\n          this.memory.xdata.shift();\r\n        }\r\n        // 更新点信息\r\n        this.$refs.memoryInfo.updateSeries([\r\n          {\r\n            name: \"内存(KB)\",\r\n            data: this.memory.data,\r\n          },\r\n        ]);\r\n\r\n        // 更新最大最小值\r\n        this.$refs.memoryInfo.updateOptions(\r\n          {\r\n            xaxis: {\r\n              categories: this.memory.xdata,\r\n            },\r\n            yaxis: {\r\n              min: this.minMemory - 2,\r\n              max: this.maxMemory + 2,\r\n            },\r\n          },\r\n          true,\r\n          true\r\n        );\r\n      });\r\n      // 键值\r\n      getRedisKeySize().then((res) => {\r\n        let currentSize = res.result.keySize;\r\n        // 更新最大最小值\r\n        if (currentSize < this.minSize) {\r\n          this.minSize = currentSize;\r\n        }\r\n        if (currentSize > this.maxSize) {\r\n          this.maxSize = currentSize;\r\n        }\r\n\r\n        this.key.data.push(currentSize);\r\n        this.key.xdata.push(res.result.time);\r\n        // 5个点\r\n        if (this.key.data.length >= 6) {\r\n          this.key.data.shift();\r\n          this.key.xdata.shift();\r\n        }\r\n        // 更新点信息\r\n        this.$refs.keySize.updateSeries([\r\n          {\r\n            name: \"key数量\",\r\n            data: this.key.data,\r\n          },\r\n        ]);\r\n        // 更新最大最小值\r\n        this.$refs.keySize.updateOptions(\r\n          {\r\n            xaxis: {\r\n              categories: this.key.xdata,\r\n            },\r\n            // 避免最大最小值一致\r\n            yaxis: {\r\n              min: this.minSize - 2,\r\n              max: this.maxSize + 2,\r\n            },\r\n          },\r\n          true,\r\n          true\r\n        );\r\n      });\r\n    },\r\n    getInfo() {\r\n      getRedisInfo().then((res) => {\r\n        let data = [];\r\n        res.result.forEach((e) => {\r\n          if (e.description) {\r\n            data.push(e);\r\n          }\r\n        });\r\n        this.redisInfo = data;\r\n      });\r\n    },\r\n  },\r\n  beforeDestroy() {\r\n    if (this.timer) {\r\n      clearInterval(this.timer);\r\n    }\r\n  },\r\n  mounted() {\r\n    this.init();\r\n  },\r\n};\r\n</script>\r\n<style lang=\"less\">\r\n</style>"]}]}